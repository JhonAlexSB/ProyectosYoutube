Link video youtube:
https://youtu.be/T1intZyhXDU
  
Titulo:
  Django, Curso de Django para Principiantes

Autor:
  Fazt

>>>>
3:34
  Programas

Instalacion Python

>> Ver versiones
python --version
pip --version
django-admin --version
python -m django --version

Versiones de programas del video
python 3.10.6
pip 22.2.1
virtualenv 20.16.4
django 4.1

Actualizar pip
$ pip install --upgrade pip

>>>>
10:50
  VirtualEnv

Instalar herramienta de virtualizacion
  pip install virtualenv

Crear entorno virtual
  virtual env 

Activar entorno virtual "Termux"
  srca
Desactivar entorno virtual "Termux"
  srcd


>>>>
17:11
  Instalar Django

>>
Entrar en el entorno virtual
  Termux
  srca  -  source env/bin/activate

>>
Salir del entorno virtual
  Termux
  srcd  -  deactivate

>> 
Ver si se instalo correctamente es revisar la version 'codigo en primeras lineas'

pip install django

>>>>
  19:30
Crear proyecto de django

Crear proyecto con django
    >> Esta se borra y se usa la siguiente linea
  django-admin startproject misitio
  django-admin startproject misitio .
>> Esto crea la carpeta misitio y el archivo manage.py

>> Arancar servidor
  python manage.py runserver
>> Esto creara un archivo llamado db.sqlite3


>> Arancar servidor con puerto especifico
  python manage.py runserver 3000


>>>>
  24:27
Estructura de proyecto

>>
  settings.py
allowed_host=[] -> Que host tienen permitido conectarse
debug=true -> Sirve para obtener informacion en desarrollo
secrect_key -> Sirve para encriptar y compartir informacion con el navegador
installed_apps=[] -> Aplicaciones instaladas en el proyecto
databases={} -> Para seleccionar que base de datos usar 

>>
  umisitio/urls.py
Las direcciones que los usuarios pueden visitar

>>
  misitio/asgi.py
  misitio/wsgi.py
Sirven para servir contenido

>>>>
  32:57
Creacion de una App

python manage.py startapp miapp

>>>>
37:44
  Estructura de una app

miapp/views.py
  Lo que envia al ciente y archivo principal

miapp/migration/
  Se llenara cuando se use la base de datos

>>
  Django viene con ORM para usar base de datos con codigo de python y no SQL

miapp/admin.py
  Crear datos,usuarios,roles

miapp/apps.py
  Es un equivalente a settings.py

miapp/models.py
  Crear clases que sera tablas para sql

>>>>
41:10
  Hello World
  Crear hola mundo

modificar miapp/views.py
modificar misitio/urls.py

>>>>
46:51
  Include

Crear archivo en miapp llamado urls.py
  miapp/urls.py

Se pasan las urls.py de misitio a miapp
  misitio/urls.py

  Se boran las importaciones de views en misitio.urls.py
  y Se crean las importaciones en miapp/urls.py de views


>>>>
52:25
  DATABASE MODELS

> Instalacion de gestor de bd sqlite

>>Desde el navegador
  - entrar en direccion sqlitebrowser.org/dl/ y descargar la version para el sistema operativo

> Abrir archivo db.sqlite3 con la aplicacion instalada
> Para hacer migraciones
  python manage.py makemigrations

> No hace nada por que ya viene con migraciones echas
  python manage.py migrate

> Eventualmente se usara la carpeta /miapp/migrations
> Modificamos el archivo miapp/models.py
> Despues ejecutamos en consola, posteriormente no hay diferencia
  python manage.py runserver

> Modificamos el archivo misitio/settings.py
> Volvemos a ejecutar en cosola sin error
  python manage.py runserver

> Creamos el archivo miapp/migrations/0001_initial.py con el siguiente comando que ejecuta las nuevas migraciones 
  python manage.py makemigrations miapp

- Ese archivo es parte de la ORM de django para manegar la base de datos y se
  crea automaticamente
  python manage.py migrate miapp

> Es como una actualizacion de la tabla ORM creada si se actualiza en la
aplicacion sqlitebrowser se notara el incremento de 11 tablas a 12

----- 1:02:37 Agregar otra clase llamada tareas
> Modificamos el archivo miapp/models.py

> Ejecutamos en consola
  python manage.py makemigrations

> Creara automaicamento otro archivo, un miapp/migrations/0002_task.py
> El siguiente comando agregara en db.sqlite3 otra tabla que podremos ver
con sqlitebrowser, se notara el incremento de 12 tablas a 13
  python manage.py migrate

> ?Como cambiar el gestor de base de datos?
ir a la documentacion oficial de django buscadonla en internet por django
databases o en la url docs.djangoproject.com/en/4.1/ref/databases/

>>>>
1:08:11
  Django Shell

python manage.py shell

> Se importaran las tablas para usarlas y se insertaran datos
  from miapp.models import Project, Task
  p = Project(name="aplicacion movil")
  p
  p.save()
  p = Project(name="aplicacion web usando Django")

> Se listaran todos los datos de la tabla Project
  Project.objects.all()
> Retornara esto varios objetos
  <QuerySet [<Project: Project object (1)>, <Project: Project object (2)>]>

> Buscar por parametro
  Project.objects.get(id=1)
  Project.objects.get(name="aplicacion movil")

> Para salir del interprete
  exit()

> Crear una tarea referenciando un projecto
  from miapp.models import Project, Task
  p = Project.objects.get(id=1)
  p.task_set.all()

> Lo ultimo retorna un query basio " <QuerySet []> " por que no hay ninguna
tarea relacionada con ese projecto

  p.task_set.create(title="descargar IDE")

> La linea anterior crea una fila en tarea vinculada al projecto 1

  p.task_set.create(title="desarrollar login")
  p.task_set.all()

> Lo ultimo retornara dos objetos que se crearon recientemente

  Project.objects.filter(name="movil")

> Lo anterior es para que no nos retorne error en una busqueda si no un queryset
basio

  Project.objects.filter(name__startswith="aplicacion")


>>>>
1:19:56
  Params
  
miapp/urls.py
miapp/views.py

> se modificaron estos valores para obetner por el url del navegador un username

